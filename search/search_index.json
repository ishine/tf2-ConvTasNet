{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This repo serves to explore the concepts contained in the paper Conv-TasNet: Surpassing Ideal Time-Frequency Magnitude Masking for Speech Separation . The authors of the paper provided PyTorch code as an example implementation . Additionally, there exists an official PyTorch implementation ; the official implementation was used as a guide for the TensorFlow code contained in this repo.","title":"Home"},{"location":"#home","text":"This repo serves to explore the concepts contained in the paper Conv-TasNet: Surpassing Ideal Time-Frequency Magnitude Masking for Speech Separation . The authors of the paper provided PyTorch code as an example implementation . Additionally, there exists an official PyTorch implementation ; the official implementation was used as a guide for the TensorFlow code contained in this repo.","title":"Home"},{"location":"Hyerparameters/","text":"Hyperparameters Network hyperparameters: Symbol Description N Number of filters in autoencoder L Length of the filters (in samples) B Number of channels in bottleneck and the residual paths\u2019 1 \u00d7 1-conv blocks Sc Number of channels in skip-connection paths\u2019 1 \u00d7 1-conv blocks H Number of channels in convolutional blocks P Kernel size in convolutional blocks X Number of convolutional blocks in each repeat R Number of repeats","title":"Hyperparameters"},{"location":"Hyerparameters/#hyperparameters","text":"Network hyperparameters: Symbol Description N Number of filters in autoencoder L Length of the filters (in samples) B Number of channels in bottleneck and the residual paths\u2019 1 \u00d7 1-conv blocks Sc Number of channels in skip-connection paths\u2019 1 \u00d7 1-conv blocks H Number of channels in convolutional blocks P Kernel size in convolutional blocks X Number of convolutional blocks in each repeat R Number of repeats","title":"Hyperparameters"},{"location":"sources/The%20Algorithm/","text":"ConvTasNet model.algorithm.ConvTasNet( num_sources=2, enc_kernel_size=16, enc_num_feats=512, msk_kernel_size=3, msk_num_feats=128, msk_num_hidden_feats=512, msk_num_layers=8, msk_num_stacks=3, msk_activate=\"sigmoid\", ) Separates the signals. Arguments num_sources (int, optional) : The number of sources to split. enc_kernel_size (int, optional) : The convolution kernel size of the encoder/decoder. enc_num_feats (int, optional) : The feature dimensions passed to mask generator. msk_kernel_size (int, optional) : The convolution kernel size of the mask generator. msk_num_feats (int, optional) : The input/output feature dimension of conv block in the mask generator. msk_num_hidden_feats (int, optional) : The internal feature dimension of conv block of the mask generator. msk_num_layers (int, optional) : The number of layers in one conv block of the mask generator. msk_num_stacks (int, optional) : The numbr of conv blocks of the mask generator. msk_activate (str, optional) : The activation function of the mask output (Default: sigmoid ). Note This implementation corresponds to the \"non-causal\" setting in the paper. MaskGenerator model.algorithm.MaskGenerator( input_dim, num_sources, kernel_size, num_feats, num_hidden, num_layers, num_stacks, msk_activate ) TCN (Temporal Convolution Network) Separation Module Generates masks for separation. Arguments input_dim (int) : Input feature dimension. num_sources (int) : The number of sources to separate. kernel_size (int) : The convolution kernel size of conv blocks. num_feats (int) : Input/output feature dimenstion of conv blocks. num_hidden (int) : Intermediate feature dimention of conv blocks. num_layers (int) : The number of conv blocks in one stack. num_stacks (int) : The number of conv block stacks. msk_activate (str) : The activation function of the mask output. ConvBlock model.algorithm.ConvBlock(filters, kernel_size, no_residual=False) 1D Convolutional block. Arguments filters (int) : The number of channels in the internal layers. kernel_size (int) : The convolution kernel size of the middle layer. no_residual (bool, optional) : Disable residual block/output.","title":"The Algorithm"},{"location":"sources/The%20Algorithm/#convtasnet","text":"model.algorithm.ConvTasNet( num_sources=2, enc_kernel_size=16, enc_num_feats=512, msk_kernel_size=3, msk_num_feats=128, msk_num_hidden_feats=512, msk_num_layers=8, msk_num_stacks=3, msk_activate=\"sigmoid\", ) Separates the signals. Arguments num_sources (int, optional) : The number of sources to split. enc_kernel_size (int, optional) : The convolution kernel size of the encoder/decoder. enc_num_feats (int, optional) : The feature dimensions passed to mask generator. msk_kernel_size (int, optional) : The convolution kernel size of the mask generator. msk_num_feats (int, optional) : The input/output feature dimension of conv block in the mask generator. msk_num_hidden_feats (int, optional) : The internal feature dimension of conv block of the mask generator. msk_num_layers (int, optional) : The number of layers in one conv block of the mask generator. msk_num_stacks (int, optional) : The numbr of conv blocks of the mask generator. msk_activate (str, optional) : The activation function of the mask output (Default: sigmoid ). Note This implementation corresponds to the \"non-causal\" setting in the paper.","title":"ConvTasNet"},{"location":"sources/The%20Algorithm/#maskgenerator","text":"model.algorithm.MaskGenerator( input_dim, num_sources, kernel_size, num_feats, num_hidden, num_layers, num_stacks, msk_activate ) TCN (Temporal Convolution Network) Separation Module Generates masks for separation. Arguments input_dim (int) : Input feature dimension. num_sources (int) : The number of sources to separate. kernel_size (int) : The convolution kernel size of conv blocks. num_feats (int) : Input/output feature dimenstion of conv blocks. num_hidden (int) : Intermediate feature dimention of conv blocks. num_layers (int) : The number of conv blocks in one stack. num_stacks (int) : The number of conv block stacks. msk_activate (str) : The activation function of the mask output.","title":"MaskGenerator"},{"location":"sources/The%20Algorithm/#convblock","text":"model.algorithm.ConvBlock(filters, kernel_size, no_residual=False) 1D Convolutional block. Arguments filters (int) : The number of channels in the internal layers. kernel_size (int) : The convolution kernel size of the middle layer. no_residual (bool, optional) : Disable residual block/output.","title":"ConvBlock"}]}